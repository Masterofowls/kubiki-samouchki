---
interface Props {
  variant?: 'transparent' | 'solid';
  showTelegramButton?: boolean;
}

const { 
  variant = 'transparent',
  showTelegramButton = true 
} = Astro.props;

const navItems = [
  { href: '/rules', text: '–ü—Ä–∞–≤–∏–ª–∞', icon: 'üìã' },
  { href: '/games', text: '–ò–≥—Ä—ã', icon: 'üéÆ' },
  { href: '/for-parents', text: '–†–æ–¥–∏—Ç–µ–ª—è–º', icon: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶' },
  { href: '/faq', text: 'FAQ', icon: '‚ùì' },
  { href: '/contact', text: '–ö–æ–Ω—Ç–∞–∫—Ç—ã', icon: 'üìû' }
];

const pathname = new URL(Astro.request.url).pathname;

const baseClass = 'relative';

const textClass = 'text-slate-600 hover:text-slate-900';
---

<nav class={`w-full transition-all duration-300 ${baseClass}`} id="main-header">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-3">
    <div class="flex items-center justify-between">
      <!-- Logo -->
      <a 
        href="/" 
        class="flex items-center space-x-2 bg-gradient-to-r from-sky-600 to-emerald-600 bg-clip-text text-transparent font-bold hover:opacity-80 transition-all duration-300"
      >
        <span class="text-2xl">üéØ</span>
        <span class="text-2xl font-bold">–ö—É–±–∏–∫–∏-–°–∞–º–æ—É—á–∫–∏</span>
      </a>

      <!-- Desktop Navigation -->
      <div class="hidden md:flex items-center space-x-1">
        {navItems.map(item => (
          <a
            href={item.href}
            class={`
              nav-link group relative px-4 py-2 rounded-full
              transition-all duration-300 
              ${pathname === item.href 
                ? variant === 'transparent'
                  ? 'text-white bg-white/20'
                  : 'text-primary-600 bg-primary-50'
                : `${textClass} hover:bg-white/10`
              }
            `}
          >
            <span class="relative z-10 flex items-center gap-2">
              <span class="text-lg">{item.icon}</span>
              <span>{item.text}</span>
            </span>

            {/* Hover Effect */}
            <span class="
              absolute inset-0 rounded-full
              bg-gradient-to-r from-primary-500/20 to-accent-500/20
              opacity-0 group-hover:opacity-100
              transition-opacity duration-300
              blur
            "></span>
          </a>
        ))}

        {showTelegramButton && (
          <a
            href="https://t.me/kubiki_samouchki"
            target="_blank"
            rel="noopener noreferrer"
            class={`
              flex items-center gap-2 px-4 py-2 rounded-full
              ${variant === 'transparent' 
                ? 'bg-white/10 hover:bg-white/20 text-white' 
                : 'bg-primary-500 hover:bg-primary-600 text-white'
              }
              transition-all duration-300 hover:scale-105
            `}
          >
            <svg class="w-5 h-5" viewBox="0 0 24 24" fill="currentColor">
              <path d="M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0zm5.562 8.161c-.18 1.897-.962 6.502-1.359 8.627-.168.9-.5 1.201-.82 1.23-.697.064-1.226-.461-1.901-.903-1.056-.692-1.653-1.123-2.678-1.799-1.185-.781-.417-1.21.258-1.911.177-.184 3.247-2.977 3.307-3.23.007-.032.015-.15-.056-.212s-.174-.041-.249-.024c-.106.024-1.793 1.139-5.062 3.345-.48.33-.913.49-1.302.48-.428-.009-1.252-.241-1.865-.44-.756-.244-1.358-.374-1.307-.789.027-.216.324-.437.892-.663 3.498-1.524 5.831-2.529 6.998-3.015 3.333-1.386 4.025-1.627 4.477-1.635.398-.006.922.155 1.059.452.089.189.132.394.13.615l.001.005z"/>
            </svg>
            <span class="font-medium">Telegram</span>
          </a>
        )}
      </div>

      <!-- Mobile Menu Button -->
      <button
        id="mobile-menu-button"
        class={`md:hidden p-2 rounded-lg ${textClass} hover:bg-white/10 transition-colors`}
        aria-label="–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"
      >
        <svg
          class="w-6 h-6"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M4 6h16M4 12h16M4 18h16"
          />
        </svg>
      </button>
    </div>

    <!-- Mobile Navigation -->
    <div
      id="mobile-menu"
      class={`
        hidden md:hidden fixed inset-x-0 top-[57px]
        ${variant === 'transparent' ? 'bg-black/50' : 'bg-white'}
        backdrop-blur-lg border-t border-white/10
      `}
    >
      <div class="w-full px-4 py-4 flex flex-col space-y-2">
        {navItems.map(item => (
          <a
            href={item.href}
            class={`
              flex items-center gap-2 px-4 py-3 rounded-xl
              ${pathname === item.href 
                ? variant === 'transparent'
                  ? 'bg-white/20 text-white'
                  : 'bg-primary-50 text-primary-600'
                : `${textClass} hover:bg-white/10`
              }
              transition-all duration-300
            `}
          >
            <span class="text-xl">{item.icon}</span>
            <span>{item.text}</span>
          </a>
        ))}

        {showTelegramButton && (
          <a
            href="https://t.me/kubiki_samouchki"
            target="_blank"
            rel="noopener noreferrer"
            class={`
              flex items-center gap-2 px-4 py-3 rounded-xl
              ${variant === 'transparent'
                ? 'bg-white/10 hover:bg-white/20 text-white'
                : 'bg-primary-500 hover:bg-primary-600 text-white'
              }
              transition-all duration-300
            `}
          >
            <svg class="w-5 h-5" viewBox="0 0 24 24" fill="currentColor">
              <path d="M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0zm5.562 8.161c-.18 1.897-.962 6.502-1.359 8.627-.168.9-.5 1.201-.82 1.23-.697.064-1.226-.461-1.901-.903-1.056-.692-1.653-1.123-2.678-1.799-1.185-.781-.417-1.21.258-1.911.177-.184 3.247-2.977 3.307-3.23.007-.032.015-.15-.056-.212s-.174-.041-.249-.024c-.106.024-1.793 1.139-5.062 3.345-.48.33-.913.49-1.302.48-.428-.009-1.252-.241-1.865-.44-.756-.244-1.358-.374-1.307-.789.027-.216.324-.437.892-.663 3.498-1.524 5.831-2.529 6.998-3.015 3.333-1.386 4.025-1.627 4.477-1.635.398-.006.922.155 1.059.452.089.189.132.394.13.615l.001.005z"/>
            </svg>
            <span class="font-medium">–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ Telegram</span>
          </a>
        )}
      </div>
    </div>
  </nav>
</header>

<script>
  const header = document.getElementById('main-header');
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');
  let lastScroll = 0;

  // Handle scroll
  window.addEventListener('scroll', () => {
    if (header) {
      const currentScroll = window.pageYOffset;
      
      // Show/hide header on scroll
      if (currentScroll <= 0) {
        header.style.transform = 'translateY(0)';
      } else if (currentScroll > lastScroll) {
        header.style.transform = 'translateY(-100%)';
        if (mobileMenu) mobileMenu.classList.add('hidden');
      } else {
        header.style.transform = 'translateY(0)';
      }

      // Add/remove background on scroll
      if (currentScroll > 50) {
        header.classList.add('bg-white/90', 'border-gray-200/20');
        header.classList.remove('bg-white/5', 'border-white/10');
      } else {
        header.classList.remove('bg-white/90', 'border-gray-200/20');
        header.classList.add('bg-white/5', 'border-white/10');
      }

      lastScroll = currentScroll;
    }
  });

  // Handle mobile menu
  if (mobileMenuButton && mobileMenu) {
    mobileMenuButton.addEventListener('click', () => {
      mobileMenu.classList.toggle('hidden');
    });
  }

  // Close mobile menu when clicking outside
  document.addEventListener('click', (e) => {
    if (mobileMenu && !mobileMenu.contains(e.target as Node) && 
        mobileMenuButton && !mobileMenuButton.contains(e.target as Node)) {
      mobileMenu.classList.add('hidden');
    }
  });
</script>

<style>
  .nav-link {
    position: relative;
    overflow: hidden;
  }

  .nav-link::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 50%;
    width: 0;
    height: 2px;
    background: currentColor;
    transition: all 0.3s ease;
    transform: translateX(-50%);
  }

  .nav-link:hover::after {
    width: 100%;
  }

  @media (max-width: 768px) {
    .nav-link::after {
      display: none;
    }
  }
</style>
