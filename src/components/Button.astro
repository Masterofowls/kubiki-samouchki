---
interface Props {
  variant?: 'primary' | 'secondary' | 'outline' | 'gradient';
  size?: 'sm' | 'md' | 'lg';
  href?: string;
  class?: string;
}

const { 
  variant = 'primary',
  size = 'md',
  href,
  class: className = '',
  ...rest
} = Astro.props;

const variants = {
  primary: 'bg-blue-600 hover:bg-blue-700 text-white',
  secondary: 'bg-purple-600 hover:bg-purple-700 text-white',
  outline: 'border-2 border-blue-600 text-blue-600 hover:bg-blue-600 hover:text-white',
  gradient: 'bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white'
};

const sizes = {
  sm: 'px-4 py-2 text-sm',
  md: 'px-6 py-3 text-base',
  lg: 'px-8 py-4 text-lg'
};

const classes = `
  inline-flex 
  items-center 
  justify-center 
  rounded-lg 
  font-medium 
  transition-all 
  duration-300 
  transform 
  hover:scale-105 
  hover:shadow-lg 
  focus:outline-none 
  focus:ring-2 
  focus:ring-offset-2 
  focus:ring-blue-500
  ${variants[variant]}
  ${sizes[size]}
  ${className}
`;
---

{
  href ? (
    <a href={href} class={classes} {...rest}>
      <slot />
    </a>
  ) : (
    <button class={classes} {...rest}>
      <slot />
    </button>
  )
}

<style>
  button:hover, a:hover {
    transform: translateY(-2px);
  }

  .bg-gradient-to-r {
    background-size: 200% auto;
    transition: background-position 0.5s ease-out;
  }

  .bg-gradient-to-r:hover {
    background-position: right center;
  }
</style>
