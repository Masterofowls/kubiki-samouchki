---
import IconButton from './IconButton.astro';

interface Props {
  title: string;
  subtitle: string;
  image: string;
  showTelegram?: boolean;
}

const { 
  title, 
  subtitle,
  image,
  showTelegram = true 
} = Astro.props;

const cubeIcons = [
  { icon: 'üéØ', delay: '0' },
  { icon: 'üé≤', delay: '100' },
  { icon: 'üéÆ', delay: '200' },
  { icon: 'üß©', delay: '300' },
];
---

<div class="hero-section relative min-h-[90vh] flex items-center justify-center overflow-hidden">
  <!-- Background Image -->
  <div class="absolute inset-0 z-0 bg-primary-900">
    <picture>
      <source media="(max-width: 768px)" srcset={image} />
      <img 
        src={image} 
        alt="" 
        class="absolute inset-0 w-full h-full object-cover opacity-50"
        loading="eager"
        decoding="sync"
      />
    </picture>
    <div class="absolute inset-0 bg-gradient-to-br from-primary-900/90 to-accent-900/90 backdrop-blur-[2px]"></div>
  </div>

  <!-- Floating Cubes (only on desktop) -->
  <div class="absolute inset-0 overflow-hidden pointer-events-none hidden md:block">
    {cubeIcons.map(({ icon, delay }) => (
      <div 
        class="absolute animate-float-reduced motion-reduce:animate-none"
        style={`animation-delay: ${delay}ms; left: ${Math.random() * 90}%; top: ${Math.random() * 70}%`}
      >
        <span class="text-4xl md:text-5xl text-white/20">{icon}</span>
      </div>
    ))}
  </div>

  <!-- Main Content -->
  <div class="container mx-auto px-4 relative z-10">
    <div class="max-w-4xl mx-auto text-center text-white">
      <!-- Badge -->
      <div 
        class="inline-flex items-center gap-2 mb-8 px-4 py-2 rounded-full 
        bg-white/10 backdrop-blur-sm border border-white/20 text-white/90"
      >
        <span class="animate-pulse-slow">üéØ</span>
        <span class="text-sm font-medium">–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ</span>
      </div>

      <!-- Title with Gradient -->
      <h1 class="text-5xl md:text-7xl font-bold mb-6 text-white">
        {title}
      </h1>

      <!-- Subtitle -->
      <p class="text-xl md:text-2xl text-white/90 mb-8 max-w-2xl mx-auto leading-relaxed">
        {subtitle}
      </p>

      <!-- Action Buttons -->
      <div class="flex flex-col sm:flex-row gap-4 justify-center mb-12">
        <a 
          href="/rules" 
          class="btn btn-primary btn-lg group bg-white/20 hover:bg-white/30 backdrop-blur-sm 
          border border-white/30 px-8 py-4 rounded-full transition-all duration-300
          hover:scale-105 hover:shadow-glow"
        >
          –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 ml-2 group-hover:translate-x-1 transition-transform" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3" />
          </svg>
        </a>

        <a 
          href="/contacts" 
          class="btn btn-outline btn-lg group border-2 border-white/30 hover:border-white/50
          px-8 py-4 rounded-full transition-all duration-300 hover:scale-105"
        >
          –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 ml-2 group-hover:translate-x-1 transition-transform" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
          </svg>
        </a>
      </div>

      <!-- Telegram Button -->
      {showTelegram && (
        <a
          href="https://t.me/kubiki_samouchki"
          target="_blank"
          rel="noopener noreferrer"
          class="inline-flex items-center gap-2 px-6 py-3 bg-[#179CDE] text-white rounded-full hover:bg-[#0088CC] transition-colors duration-300 group"
        >
          <svg class="w-5 h-5" viewBox="0 0 24 24" fill="currentColor">
            <path d="M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0zm5.562 8.161c-.18 1.897-.962 6.502-1.359 8.627-.168.9-.5 1.201-.82 1.23-.697.064-1.226-.461-1.901-.903-1.056-.692-1.653-1.123-2.678-1.799-1.185-.781-.417-1.21.258-1.911.177-.184 3.247-2.977 3.307-3.23.007-.032.015-.15-.056-.212s-.174-.041-.249-.024c-.106.024-1.793 1.139-5.062 3.345-.48.33-.913.49-1.302.48-.428-.009-1.252-.241-1.865-.44-.756-.244-1.358-.374-1.307-.789.027-.216.324-.437.892-.663 3.498-1.524 5.831-2.529 6.998-3.015 3.333-1.386 4.025-1.627 4.477-1.635.398-.006.922.155 1.059.452.089.189.132.394.13.615l.001.005z"/>
          </svg>
          <span class="font-medium">–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Telegram</span>
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 group-hover:translate-x-1 transition-transform" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
          </svg>
        </a>
      )}
    </div>
  </div>

  <!-- Decorative Elements (only on desktop) -->
  <div class="absolute bottom-0 inset-x-0 h-32 bg-gradient-to-t from-black/20 to-transparent hidden md:block"></div>
  <div class="absolute -top-24 -right-24 w-96 h-96 bg-primary-500/20 rounded-full mix-blend-overlay opacity-70 hidden md:block motion-reduce:hidden"></div>
  <div class="absolute -bottom-24 -left-24 w-96 h-96 bg-accent-500/20 rounded-full mix-blend-overlay opacity-70 hidden md:block motion-reduce:hidden"></div>
</div>

<style>
  @keyframes float-reduced {
    0%, 100% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-10px);
    }
  }

  .animate-float-reduced {
    animation: float-reduced 4s ease-in-out infinite;
  }

  .animate-fade-in {
    animation: fadeIn 1s ease-out;
  }

  .animate-slide-up {
    animation: slideUp 1s ease-out;
  }

  .animate-fade-in-up {
    animation: fadeInUp 1s ease-out;
  }


</style>

<script>
  // Only enable parallax on desktop and if user hasn't requested reduced motion
  if (window.matchMedia('(min-width: 768px) and (prefers-reduced-motion: no-preference)').matches) {
    const heroImg = document.querySelector('.hero-section img') as HTMLElement;
    let ticking = false;
    let lastScrollY = window.scrollY;
    
    const updateParallax = () => {
      if (heroImg) {
        const translateY = lastScrollY * 0.2;
        heroImg.style.transform = `translate3d(0, ${translateY}px, 0)`;
      }
      ticking = false;
    };

    window.addEventListener('scroll', () => {
      lastScrollY = window.scrollY;
      if (!ticking) {
        requestAnimationFrame(updateParallax);
        ticking = true;
      }
    }, { passive: true });
  }
</script>
